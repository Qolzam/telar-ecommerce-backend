// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  fullName  String?
  password  String
  resetToken       String?   
  resetTokenExpiry DateTime? 
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]
  carts  Cart[]

  @@map("users")
  @@index([resetToken])
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  sku         String   @unique
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  images      String[] // Array of image URLs
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("products")
}

model Order {
  id               Int         @id @default(autoincrement())
  orderNo          String      @unique
  userId           Int
  status           OrderStatus @default(PENDING)
  total            Decimal     @db.Decimal(10, 2)
  transactionId    String?     // Payment transaction ID
  paymentTimestamp DateTime?   // When payment was completed
  notes            String?     // Order notes/comments
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Cart {
  id        String   @id @default(cuid())
  userId    Int?     // Null for guest carts
  sessionId String?  // For guest carts
  subtotal  Decimal  @db.Decimal(10, 2) @default(0)
  tax       Decimal  @db.Decimal(10, 2) @default(0)
  total     Decimal  @db.Decimal(10, 2) @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User?      @relation(fields: [userId], references: [id])
  items CartItem[]

  @@map("carts")
  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    String
  productId Int
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
  @@unique([cartId, productId]) // Prevent duplicate products in same cart
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
